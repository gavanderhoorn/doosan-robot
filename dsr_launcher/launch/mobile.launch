<?xml version="1.0"?>

<!--launch>
  <include file="$(find dsr_moveit_config)/launch/m1013/m1013.launch"/>
</launch-->

<launch>
  <arg name="gui"     default="true"/>
  <arg name="rviz"    default="true"/>
  <arg name="world"   default="empty.world"/>
  <arg name="ns"      default="dsr01"/>
  <arg name="x"       default="2"/>
  <arg name="y"       default="-4"/>
  <arg name="z"       default="0"/>
  <arg name="roll"    default="0"/>
  <arg name="pitch"   default="0"/>
  <arg name="yaw"     default="0.7"/>
  <!-- Start Gazebo with an empty world. -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="use_sim_time" value="true"/>
    <arg name="gui"          value="$(arg gui)"/>
    <arg name="world_name"   value="$(find dsr_launcher)/worlds/$(arg world)"/>
    <arg name="headless"    value="false"/>
    <arg name="debug"       value="false"/>
  </include>

  <!-- gazebo를 위한 controller -->
  <rosparam command="load" file="$(find dsr_control)/config/dsr_control.yaml" ns="$(arg ns)" />
  <param name="$(arg ns)/dsr_velocity_controller/base_frame_id" value="$(arg ns)/base_link"/>
  <node name="controller_spawner" pkg="controller_manager" type="spawner" output="screen"
        args="dsr_velocity_controller dsr_joint_publisher" ns="$(arg ns)"/>

  <!-- base_link에 twist marker를 표시 -->
  <node pkg="interactive_marker_twist_server" type="marker_server" name="twist_marker_server" output="screen" ns="$(arg ns)">
    <param name="link_name" value="/$(arg ns)/base_link" />
  </node>
  <!-- mux에서 정의된 입력을 출력 cmd_vel로 출력 -->
  <node pkg="twist_mux" type="twist_mux" name="twist_mux" ns="$(arg ns)">
    <rosparam command="load" file="$(find dsr_control)/config/twist_mux.yaml"/>
    <remap from="cmd_vel_out" to="/$(arg ns)/dsr_velocity_controller/cmd_vel" />
  </node>
  <!-- odometry filtered -->
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization" ns="$(arg ns)">
    <rosparam command="load" file="$(find dsr_control)/config/localization.yaml"/>
    <remap from="odometry/filtered" to="odom" />
    <param name="base_link_frame" value="$(arg ns)/base_link"/>
  </node>


  <param name="/$(arg ns)/robot_description" command="$(find xacro)/xacro '$(find dsr_description)/xacro/mobile.urdf.xacro'
	                       '--inorder' 'namespace:=$(arg ns)'"/>

	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" ns="$(arg ns)">
		<param name="tf_prefix" value="$(arg ns)" />
		<param name="robot_description" value="/$(arg ns)/robot_description" />
	</node>

  <!-- odom tf를 사용하여 로봇 움직임을 rviz에서 표현 -->
  <node pkg="tf" type="static_transform_publisher" name="base_link_tf" ns="$(arg ns)"
        args="$(arg x) $(arg y) $(arg z) $(arg yaw) 0 0 map odom 100"/>

  <!-- Spawn the model into gazebo. -->
    <node name="spawn_create_model" pkg="gazebo_ros" type="spawn_model" ns="$(arg ns)"
    args="-x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)
    -urdf -param /$(arg ns)/robot_description -model $(arg ns)"/>

  <!-- View in RVIZ. -->
  <group if="$(arg rviz)">
    <node name="dmodel" pkg="dsr_launcher" type="dmodel.py"/>
  </group>
</launch>
